--------------------------------------------------------------------------------
Git Rule
--------------------------------------------------------------------------------
++:
new file

--:
delete file

+-:
change file

--------------------------------------------------------------------------------
Git Initial Set
--------------------------------------------------------------------------------
user set:
$ git config --global user.name "Zhe-Lini"
$ git config --global user.email "s1023165@g.ncyu.edu.tw"

view .gitconfig:
$ git config --list

edit .gitconfig:
sudo vim ~/.gitconfig 

abridge status to st:
$ git config --global alias.st status

initial git of directory:
$ git init

--------------------------------------------------------------------------------
Git Use Command
--------------------------------------------------------------------------------
view git status:
$ git status

add file to Staging Area:
$ git add *.html	//add .html file to Staging Area
$ git add --all		//add all file to Staging Area

commit file to Repository from Staging Area:
$ git commit -m "Test"
$ git commit --allow-empty -m "Empty"	//commit empty file

add & commit  file at the same time:
$ git commit -a -m "Test"

view commit record:
$ git log		//detailed
$ git log --oneline	//simple
$ git log --graph	//GUI interface

give up all modify:
$git checkout .	//=$ git reset --hard @ ; all file return to last commit status

give up part file modify:
$ git checkout test.html	//part file return to last commit status

remove file:
$ git rm test.html

untracked file:
$ git rm test.html --cached

rename file:
$ git mv test1.html test2.html

modify last commit message:
$ git commit --amend -m "test2"

add file to last commit:
$ git commit --amend --no-edit

untrack git file:
git rm -rf --cached filename

add ignore file:
$ touch .gitignore	//.gitignore plase file's name that  you want to ignore

delete ignore file:
$ git clean -fX

view file detailed commit:
$ git log -p test.html

--------------------------------------------------------------------------------
Git File History
--------------------------------------------------------------------------------
view file change:
$ git blame test.html
$ git blame -L 5,10 test.html	//show 5~10 lines

compare status currently with last commit:
$ git diff			//before add file
$ git diff HEAD			//before commit file

compare status currently with assign commit:
$ git diff commit

compare commit currently with assign commit:
$ git diff --cached commit	//=$ git diff --staged commit

compare with two commit:
$ git diff commit1 commit2

--------------------------------------------------------------------------------
Git Reset File
--------------------------------------------------------------------------------
$ git log --oneline
e12d8ef (HEAD -> master) update test3
85e7e30 add test3
657fce7 update test2
abb4f43 add test2
cef6e40 update test
cc797cd add test

replace file currently:
$ git checkout test.html        //replace file from Repository
$ git checkout HEAD~2 test.html //replace file from Repository before 2 HEAD

go to HEAD before 1 master:
$ git reset HEAD^ --mixed	//file be placed to Working Directory
				//=$ git reset HEAD^ =$ git reset @^
$ git reset HEAD^ --soft	//file be placed to Staging Area
$ git reset HEAD^ --hard        //file be placed to Repository

go to HEAD before 2 master:
$ git reset master^^		//=$ git reset master~2
$ git reset HEAD^^		//=$ git reset HEAD~2
$ git reset 85e7e30		//85e7e30 is HEAD number

go back original HEAD:
$ git reset e12d8ef --hard

view all log:
$ git reflog
$ git log -g

--------------------------------------------------------------------------------
Git Find Data
--------------------------------------------------------------------------------
find auther:
$ git log --oneline --author="Leo"

find commit message include "Test":
$ git log --oneline --grep="Test"

find commit content include "test":
$ git log -S "test"

find commit since 9am to 12am:
$ git log --oneline --since="9am" --until="12am"

find commit since 9am to 12am after 2017-01:
$ git log --oneline --since="9am" --until="12am" --after="2017-01"

--------------------------------------------------------------------------------
Git Branch
--------------------------------------------------------------------------------
$ git branch
* master		//e12d8e
  test			//b174a5

$ git log --oneline
e12d8ef (HEAD -> master) update test3
85e7e30 add test3
657fce7 update test2
abb4f43 add test2
cef6e40 update test
cc797cd add test

view branch currently:
$ git branch
$ git branch --remote	//show remote branch

new a branch:
$ git branch test

change branch:
$ git checkout test

new & change branch:
$ git checkout -b test

new & change branch from 657fce7:
$ git checkout -b new_test 657fce7

rename branch name:
$ git branch -m test TEST

delete branch:
$ git branch -d test	//delete branch have merged
$ git branch -D test	//delete branch not merged

delete remote branch:
$ git branch --delete --remote origin/master	//=$ git branch -dr origin/master

merge branch:
$ git merge test

rebuild original branch:
$ git branch new_test b174a5a

go back original branch after merge,rebase,reset:
$ git reset ORIG_HEAD --hard

view all branch:
$ git reflog
$ git log -g

--------------------------------------------------------------------------------
Git Rebase
--------------------------------------------------------------------------------
$ git log --oneline
e12d8ef (HEAD -> master) update test3
85e7e30 add test3
657fce7 update test2
abb4f43 add test2
cef6e40 update test
cc797cd add test

add original branch to test branch:
$ git rebase test	//HEAD -> original (HEAD isn't test)

start interactive mode:
git rebase -i cc797cd	//interactive mode include e12d8ef to cef6e40

1.pick->reword
amend commit message

2.pick->squash
merge past commit
 a.squash lines will merge upper pick
 b.amend merge commit message

3.pick->edit
separate past commit
 a.$ git reset HEAD^
   $ git status
 b.$ git add test_1.html
   $ git commit -m "separate test to test_1"
 c.$ git add test_2.html
   $ git commit -m "separate test to test_2"
 d.$ git rebase --continue
add past commit
 a.$ git reset HEAD^
   $ git status
 b.$ touch test4.html
   $ git add test4.html
   $ git commit -m "add test4"
 c.$ git rebase --continue

--------------------------------------------------------------------------------
Git Revert
--------------------------------------------------------------------------------
add a commit to cancel last commit:
$ git revert HEAD --no-edit

--------------------------------------------------------------------------------
Git Tag
--------------------------------------------------------------------------------
$ git log --oneline
e12d8ef (HEAD -> master) update test3
85e7e30 add test3
657fce7 update test2
abb4f43 add test2
cef6e40 update test
cc797cd add test

add a lightweight tag:
$ git tag Test_Tag 85e7e30

add a annotated tag:
$ git tag Test_Tag 85e7e30 -a -m "add a annotated tag"

show tag:
$ git show Test_Tag

delete tag:
$ git tag -d Test_Tag

--------------------------------------------------------------------------------
Git Stash
--------------------------------------------------------------------------------
save working program to stash:
$ git stash -u

show stash list:
$ git stash list

take stash:
$ git stash apply stash@{0}

delete stash:
$ git stash drop stash@{0}

take & delete stash:
$ git stash pop stash@{0}

--------------------------------------------------------------------------------
Git Filter-Branch
--------------------------------------------------------------------------------
massive modify data in every commit:
$ git filter-branch --tree-filter "rm -f test.html"

go back original HEAD after filter-branch:
$ git reset refs/original/refs/heads/master --hard

force remove data:
1.force massive modify data in every commit:
 $ git filter-branch -f --tree-filter "rm -f test.html"

2.remove filter-branch backup
 $ rm .git/refs/original/refs/heads/master

3.clear reflog
 a.$ git reflog expire --all --expire=now
 b.$ git fsck --unreachable
 c.$ git gc --prune=now
 d.$ git fsck

--------------------------------------------------------------------------------
Git Cherry-Pick
--------------------------------------------------------------------------------
take commit from other branch:
$ git cherry-pick 6a498ec		//merge to original branch
$ git cherry-pick 6a498ec --no-commit	//not merge to original branch

--------------------------------------------------------------------------------
Git Remote
--------------------------------------------------------------------------------
add a point to remote:
git remote add origin https://github.com/Zhe-Lin/GitManual.git

push master to origin's master:
$ git push -u origin master
//-u: set remote origin/master is local master's upstream

if local master have upstream:
$ git push
$ git push -f			//--force

if local master havn't upstream:
$ git push origin master	//=$ git push origin master:master

push local master to remote origin/test:
$ git push origin master:test

delete remote origin/test:
$ git push origin :test

download remote file:
$ git fetch

merge remote file:
$ git merge origin/master

download & merge remote file:
$ git pull

download & merge remote file don't generate commit:
$ git pull --rebase

copy other remote file:
$ git clone https://github.com/Zhe-Lin/GitManual.git
//download & place to the same directory

$ git clone https://github.com/Zhe-Lin/GitManual.git Test
//download & place to Test directory

--------------------------------------------------------------------------------
Git Patch
--------------------------------------------------------------------------------
$ git log --oneline
e12d8ef (HEAD -> master) update test3
85e7e30 add test3
657fce7 update test2
abb4f43 add test2
cef6e40 update test
cc797cd add test

make last 2 commit patch file:
$ git format-patch 657fce7..e12d8ef	//=$ git format-patch -2
$ git format-patch -2 -o /tmp/patches	//assign location to generate patch file

use patch file:
$ git am /tmp/patches/*

